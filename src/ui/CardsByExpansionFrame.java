/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import dao.CardDAO;
import dao.CardErrataDAO;
import dao.RegionDAO;
import dto.CardDetailsDTO;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import model.Card;
import model.CardErrata;
import model.Region;

/**
 *
 * @author esena
 */
public class CardsByExpansionFrame extends javax.swing.JFrame {
    CardDAO cardDAO = new CardDAO();
    private RegionDAO regionDAO = new RegionDAO();
    private CardErrataDAO errataDAO = new CardErrataDAO();
    private int expansionId;
    /**
     * Creates new form CardsByExpansionFrame
     * @param expansionId
     * @param expansionName
     */
    public CardsByExpansionFrame(int expansionId, String expansionName) {
        initComponents();
        setExpansionData(expansionId,expansionName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelDetails = new javax.swing.JPanel();
        jPanelRegions = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListRegions = new javax.swing.JList<>();
        jButtonRegionSelect = new javax.swing.JButton();
        jTextFieldExpansionName = new javax.swing.JTextField();
        jLabelprice = new javax.swing.JLabel();
        jPanelSearch = new javax.swing.JPanel();
        jLabelSearch = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonShowCardDetails = new javax.swing.JButton();
        CardsPanel = new javax.swing.JPanel();
        jScrollPaneCards = new javax.swing.JScrollPane();
        jTableCards = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelDetails.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanelRegions.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jListRegions.setBorder(new javax.swing.border.MatteBorder(null));
        jListRegions.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jListRegions);

        jButtonRegionSelect.setText("select");
        jButtonRegionSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegionSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRegionsLayout = new javax.swing.GroupLayout(jPanelRegions);
        jPanelRegions.setLayout(jPanelRegionsLayout);
        jPanelRegionsLayout.setHorizontalGroup(
            jPanelRegionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jButtonRegionSelect, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
        );
        jPanelRegionsLayout.setVerticalGroup(
            jPanelRegionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRegionsLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRegionSelect))
        );

        jTextFieldExpansionName.setEditable(false);
        jTextFieldExpansionName.setText("expName");
        jTextFieldExpansionName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldExpansionNameActionPerformed(evt);
            }
        });

        jLabelprice.setText("price");

        jPanelSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelSearch.setText("search");

        jTextFieldSearch.setMinimumSize(new java.awt.Dimension(64, 300));

        javax.swing.GroupLayout jPanelSearchLayout = new javax.swing.GroupLayout(jPanelSearch);
        jPanelSearch.setLayout(jPanelSearchLayout);
        jPanelSearchLayout.setHorizontalGroup(
            jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabelSearch)
                .addContainerGap(44, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelSearchLayout.setVerticalGroup(
            jPanelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabelSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        jButtonShowCardDetails.setText("Show Card Details");
        jButtonShowCardDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowCardDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelDetailsLayout = new javax.swing.GroupLayout(jPanelDetails);
        jPanelDetails.setLayout(jPanelDetailsLayout);
        jPanelDetailsLayout.setHorizontalGroup(
            jPanelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelDetailsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(jButtonShowCardDetails))
                    .addGroup(jPanelDetailsLayout.createSequentialGroup()
                        .addComponent(jPanelRegions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(jTextFieldExpansionName, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                        .addGap(83, 83, 83)
                        .addComponent(jLabelprice)))
                .addGap(44, 44, 44))
        );
        jPanelDetailsLayout.setVerticalGroup(
            jPanelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldExpansionName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelprice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDetailsLayout.createSequentialGroup()
                        .addComponent(jButtonShowCardDetails)
                        .addGap(10, 10, 10)))
                .addContainerGap())
            .addGroup(jPanelDetailsLayout.createSequentialGroup()
                .addComponent(jPanelRegions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 112, Short.MAX_VALUE))
        );

        CardsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTableCards.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTableCards.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPaneCards.setViewportView(jTableCards);

        javax.swing.GroupLayout CardsPanelLayout = new javax.swing.GroupLayout(CardsPanel);
        CardsPanel.setLayout(CardsPanelLayout);
        CardsPanelLayout.setHorizontalGroup(
            CardsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneCards, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
        );
        CardsPanelLayout.setVerticalGroup(
            CardsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CardsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPaneCards, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(CardsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(CardsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldExpansionNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldExpansionNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldExpansionNameActionPerformed

    private void jButtonShowCardDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowCardDetailsActionPerformed
        int selectedRow = jTableCards.getSelectedRow();
        if (selectedRow >= 0) {
            int cardId = (int) jTableCards.getValueAt(selectedRow, 0);
            CardDetailsDTO cardDetails = cardDAO.getCardDetails(cardId);
            if (cardDetails != null) {
                CardView view = new CardView(cardDetails);
                view.setVisible(true);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Card details not found.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a card to view details.", "Warning", javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonShowCardDetailsActionPerformed

    //this button is for selecting a region from the list
    private void jButtonRegionSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegionSelectActionPerformed
        int selectedIndex = jListRegions.getSelectedIndex();
        if (selectedIndex >= 0) {
            String selectedRegionName = jListRegions.getModel().getElementAt(selectedIndex);
            Region selectedRegion = regionDAO.getAllRegions().stream()
                    .filter(region -> region.getRegionName().equals(selectedRegionName))
                    .findFirst()
                    .orElse(null);
            if (selectedRegion != null) {
                float newprice = regionDAO.getPrice(selectedRegion.getRegionName(),expansionId);
                String newtext =  newprice + selectedRegion.getCurrency();
                jLabelprice.setText(newtext);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a region from the list.", "Warning", javax.swing.JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jButtonRegionSelectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CardsByExpansionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CardsByExpansionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CardsByExpansionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CardsByExpansionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
        //    public void run() {
        //        new CardsByExpansionFrame().setVisible(true);
        //    }
        //});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CardsPanel;
    private javax.swing.JButton jButtonRegionSelect;
    private javax.swing.JButton jButtonShowCardDetails;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JLabel jLabelprice;
    private javax.swing.JList<String> jListRegions;
    private javax.swing.JPanel jPanelDetails;
    private javax.swing.JPanel jPanelRegions;
    private javax.swing.JPanel jPanelSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneCards;
    private javax.swing.JTable jTableCards;
    private javax.swing.JTextField jTextFieldExpansionName;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables

    private void setExpansionData(int expansionId,String expansionName) {
        jTextFieldExpansionName.setText(expansionName);
        List<Card> cards = getExpansionCards(expansionId);
        if (cards.isEmpty()) {
            jTextFieldExpansionName.setText("No cards found for this expansion.");
        } else {
            setScrollPane(cards);
        }
        setRegionList();
        setupSearchListener();
    }
    private void setScrollPane(List<Card> cards) {
        jTableCards.setModel(new javax.swing.table.DefaultTableModel(
            cards.stream().map(card -> new Object[]{
                card.getCardId(),
                card.getName(),
                card.getCostCoins(),
                card.getCostPotions(),
                card.getCostDebt(),
                card.getTextDescription()
            }).toArray(Object[][]::new),
            new String[]{"ID", "Name", "Cost Coins", "Cost Potions", "Cost Debt", "Description"}
        ));
    }
    private void setRegionList(){
        List<Region> regions = getAllRegions();
        if (regions.isEmpty()) {
            jListRegions.setListData(new String[]{"No regions available."});
        } else {
            jListRegions.setListData(regions.stream().map(Region::getRegionName).toArray(String[]::new));
        }
    }
    private List<Card> getExpansionCards(int expansionId){
        this.expansionId = expansionId;
        return cardDAO.getExpansionCards(expansionId);
    }
    private List<Region> getAllRegions() {
        return regionDAO.getAllRegions();
    }
    private void setupSearchListener() {
        jTextFieldSearch.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filterCards();
            }
            
            @Override
            public void removeUpdate(DocumentEvent e) {
                filterCards();
            }
            
            @Override
            public void changedUpdate(DocumentEvent e) {
                filterCards();
            }
        });
    }
    
    private void filterCards() {
        String searchText = jTextFieldSearch.getText().toLowerCase();
        List<Card> filteredCards = cardDAO.searchCardsByName(expansionId,searchText);
        if (filteredCards.isEmpty()) {
            jTableCards.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{"ID", "Name", "Cost Coins", "Cost Potions", "Cost Debt", "Description"}
            ));
        } else {
            jTableCards.setModel(new javax.swing.table.DefaultTableModel(
                filteredCards.stream().map(card -> new Object[]{
                    card.getCardId(),
                    card.getName(),
                    card.getCostCoins(),
                    card.getCostPotions(),
                    card.getCostDebt(),
                    card.getTextDescription()
                }).toArray(Object[][]::new),
                new String[]{"ID", "Name", "Cost Coins", "Cost Potions", "Cost Debt", "Description"}
            ));
        }
    }
}
