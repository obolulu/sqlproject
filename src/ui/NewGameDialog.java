/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package ui;

import dao.*;
import model.Card;
import model.Expansion;
import model.Game;
import model.Player;

import javax.swing.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 *
 * @author esena
 */
public class NewGameDialog extends javax.swing.JDialog {
    private GameDAO gameDAO;
    private PlayerDAO playerDAO;
    private ExpansionDAO expansionDAO;
    private CardDAO cardDAO;
    private PlayerExpansionDAO playerExpansionDAO;

    private DefaultListModel<Player> availablePlayersListModel;
    private DefaultListModel<Player> gamePlayersListModel;
    private DefaultListModel<Expansion> availableExpansionsListModel;
    private DefaultListModel<Card> kingdomCardsListModel;

    /**
     * Creates new form NewGameDialog
     */
    public NewGameDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(parent);

        gameDAO = new GameDAO();
        playerDAO = new PlayerDAO();
        expansionDAO = new ExpansionDAO();
        cardDAO = new CardDAO();
        playerExpansionDAO = new PlayerExpansionDAO();

        availablePlayersListModel = new DefaultListModel<>();
        gamePlayersListModel = new DefaultListModel<>();
        availableExpansionsListModel = new DefaultListModel<>();
        kingdomCardsListModel = new DefaultListModel<>();

        jListAvailablePlayers.setModel(availablePlayersListModel);
        jListGamePlayers.setModel(gamePlayersListModel);
        //jListAvailableExpansions.setModel(availableExpansionsListModel);
        jListKingdomCards.setModel(kingdomCardsListModel);

        jListAvailablePlayers.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jListGamePlayers.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION); // Can remove multiple players
        //jListAvailableExpansions.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        //now setting up data from db
        populateAvailablePlayers();
        populateAvailableExpansions();

        //the other option isnt implemented yet, I will if time is enough ^^
        jRadioButtonSelectExpansions.setSelected(true);

    }
    private boolean gameCreatedSuccessfully = false;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanelPlayers = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListAvailablePlayers = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListGamePlayers = new javax.swing.JList<>();
        jButtonAddPlayer = new javax.swing.JButton();
        jButtonRemovePlayer = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jRadioButtonSelectExpansions = new javax.swing.JRadioButton();
        jRadioButtonUseOwnedExpansions = new javax.swing.JRadioButton();
        jPanelKingdom = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListKingdomCards = new javax.swing.JList<>();
        jButtonRerollKingdom = new javax.swing.JButton();
        jButtonConfirmKingdom = new javax.swing.JButton();
        jButtonCancelKingdom = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelPlayers.setBorder(javax.swing.BorderFactory.createTitledBorder("players"));

        jScrollPane1.setViewportView(jListAvailablePlayers);

        jScrollPane2.setViewportView(jListGamePlayers);

        jButtonAddPlayer.setText("add");
        jButtonAddPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPlayerActionPerformed(evt);
            }
        });

        jButtonRemovePlayer.setText("remove");
        jButtonRemovePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemovePlayerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlayersLayout = new javax.swing.GroupLayout(jPanelPlayers);
        jPanelPlayers.setLayout(jPanelPlayersLayout);
        jPanelPlayersLayout.setHorizontalGroup(
            jPanelPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlayersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAddPlayer)
                    .addComponent(jButtonRemovePlayer))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanelPlayersLayout.setVerticalGroup(
            jPanelPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlayersLayout.createSequentialGroup()
                .addGroup(jPanelPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlayersLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelPlayersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelPlayersLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jButtonAddPlayer)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRemovePlayer)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("kingdom"));

        buttonGroup1.add(jRadioButtonSelectExpansions);
        jRadioButtonSelectExpansions.setText("Select Expansions");

        buttonGroup1.add(jRadioButtonUseOwnedExpansions);
        jRadioButtonUseOwnedExpansions.setText("Use Owned");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonSelectExpansions)
                    .addComponent(jRadioButtonUseOwnedExpansions))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jRadioButtonSelectExpansions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonUseOwnedExpansions)
                .addGap(0, 94, Short.MAX_VALUE))
        );

        jPanelKingdom.setBorder(javax.swing.BorderFactory.createTitledBorder("Kingdom Overview"));

        jScrollPane3.setViewportView(jListKingdomCards);

        jButtonRerollKingdom.setText("reroll kingdom");
        jButtonRerollKingdom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRerollKingdomActionPerformed(evt);
            }
        });

        jButtonConfirmKingdom.setText("confirm");
        jButtonConfirmKingdom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmKingdomActionPerformed(evt);
            }
        });

        jButtonCancelKingdom.setText("cancel");
        jButtonCancelKingdom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelKingdomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelKingdomLayout = new javax.swing.GroupLayout(jPanelKingdom);
        jPanelKingdom.setLayout(jPanelKingdomLayout);
        jPanelKingdomLayout.setHorizontalGroup(
            jPanelKingdomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelKingdomLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanelKingdomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelKingdomLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonRerollKingdom)
                        .addGap(68, 68, 68))
                    .addGroup(jPanelKingdomLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(jPanelKingdomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonCancelKingdom)
                            .addComponent(jButtonConfirmKingdom))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelKingdomLayout.setVerticalGroup(
            jPanelKingdomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelKingdomLayout.createSequentialGroup()
                .addGroup(jPanelKingdomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelKingdomLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelKingdomLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonRerollKingdom)
                        .addGap(49, 49, 49)
                        .addComponent(jButtonConfirmKingdom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCancelKingdom)))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanelKingdom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanelPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelKingdom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConfirmKingdomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmKingdomActionPerformed
        if (gamePlayersListModel.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please add players to the game.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (kingdomCardsListModel.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please generate a kingdom first.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Game newGame = new Game(0, null);
        int gameId = gameDAO.addGame(newGame);
        if (gameId <= 0) {
            JOptionPane.showMessageDialog(this, "Failed to create game. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int turnOrder = 1;
        for (int i = 0; i < gamePlayersListModel.getSize(); i++) {
            Player player = gamePlayersListModel.getElementAt(i);
            gameDAO.addGameParticipant(gameId, player.getPlayerId(), null, turnOrder++);
        }
        //maybe will be added in the fguture, not sure yet -- would add default cards to supply too
        //but would prolly just be information clutter:

        //addBaseCardsToSupply(gameId, gamePlayersListModel.getSize());

        for (int i = 0; i < kingdomCardsListModel.getSize(); i++) {
            Card kingdomCard = kingdomCardsListModel.getElementAt(i);
            int startingQuantity = 10; // Default quantity for most kingdom cards

            //special rules for specific cards
            //i know, not the cleanest way but works for a project of this scope
            //on a cleaner project with more focus on code, i'd add a way to ask cards about their special rules
            //instead of checking for specific names here so that the concerns of the functions would be seperated
            if (kingdomCard.getName().equals("Gardens")){
                startingQuantity = gamePlayersListModel.getSize() * 4;
            }
            //can be modified for more specific card rules here like if prosperity is selected!!


            // this is so wrong.. I need to change it so that it takes in a list and sends them at once to not
            // do db operations 10 times in a row each time..
            gameDAO.addGameSupplyCard(gameId, kingdomCard.getCardId(), startingQuantity);
        }

        JOptionPane.showMessageDialog(this, "Game created successfully! Game ID: " + gameId, "Success", JOptionPane.INFORMATION_MESSAGE);
        gameCreatedSuccessfully = true;
        this.dispose();
    }//GEN-LAST:event_jButtonConfirmKingdomActionPerformed
    private void jButtonCancelKingdomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelKingdomActionPerformed
        gameCreatedSuccessfully = false;
        this.dispose();

        }//GEN-LAST:event_jButtonCancelKingdomActionPerformed

    private void jButtonRerollKingdomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRerollKingdomActionPerformed
        generateKingdom();
    }//GEN-LAST:event_jButtonRerollKingdomActionPerformed

    private void jButtonAddPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPlayerActionPerformed
        jButtonAddPlayerToGameActionPerformed(evt);
        //populateAvailablePlayers(); // Refresh the list if needed, but not necessary here
        jListAvailablePlayers.clearSelection(); // Clear selection after adding
        toggleExpansionSelectionVisibility(); // Adjust visibility based on selection
    }//GEN-LAST:event_jButtonAddPlayerActionPerformed

    private void jButtonRemovePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemovePlayerActionPerformed
        List<Player> selectedPlayers = jListGamePlayers.getSelectedValuesList();
        for (Player player : selectedPlayers) {
            gamePlayersListModel.removeElement(player);
        }
        jListGamePlayers.clearSelection(); // Clear selection after removing
        toggleExpansionSelectionVisibility(); // Adjust visibility based on selection
    }//GEN-LAST:event_jButtonRemovePlayerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewGameDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewGameDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewGameDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewGameDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewGameDialog dialog = new NewGameDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private void generateKingdom() {
        kingdomCardsListModel.clear();
        //using hashset so there wont be duplicate cards
        Set<Card> potentialCards = new HashSet<>();

        List<Expansion> usableExpansions = new ArrayList<>();
        if (jRadioButtonUseOwnedExpansions.isSelected()) {
            if (gamePlayersListModel.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please add players to the game first to use 'Players'' Owned Expansions' option.", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
            // Aggregate all unique expansions owned by any selected player
            Set<Integer> ownedExpansionIds = new HashSet<>();
            for (int i = 0; i < gamePlayersListModel.getSize(); i++) {
                Player player = gamePlayersListModel.getElementAt(i);
                playerExpansionDAO.getExpansionsOwnedByPlayer(player.getPlayerId())
                        .forEach(exp -> ownedExpansionIds.add(exp.getExpansionId()));
            }

            if (ownedExpansionIds.isEmpty()) {
                JOptionPane.showMessageDialog(this, "None of the selected players own any expansions. Please add expansions to players or select expansions manually.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            for (Integer expansionId : ownedExpansionIds) {
                Expansion expansion = expansionDAO.getExpansionById(expansionId);
                if (expansion != null) {
                    usableExpansions.add(expansion);
                }
            }
        }
        else{
            //IMPORTANT---!!!!
            //FILL HERE!!! this should be for when they pick expansions from a list to use
            // add the selected expansions to usableExpansions
        }
        if (usableExpansions.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No expansions selected or available. Please select expansions to generate a kingdom.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        //generate kingdom cards from the usable expansions
        for (Expansion expansion : usableExpansions) {
            List<Card> cardsFromExpansion = cardDAO.getCardsByExpansionId(expansion.getExpansionId());
            if (cardsFromExpansion.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No cards found for expansion: " + expansion.getName(), "Warning", JOptionPane.WARNING_MESSAGE);
                continue;
            }
            //randomly selects 10 cards from exps
            while (potentialCards.size() < 10 && !cardsFromExpansion.isEmpty()) {
                int randomIndex = (int) (Math.random() * cardsFromExpansion.size());
                if(isBaseCard(cardsFromExpansion.get(randomIndex).getName())) {
                    // Skip base cards
                    continue;
                }
                potentialCards.add(cardsFromExpansion.remove(randomIndex));
            }
        }
        if (potentialCards.size() < 10) {
            JOptionPane.showMessageDialog(this, "Not enough unique cards available to generate a kingdom. Please select more expansions or ensure expansions have enough cards.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Add the selected cards to the kingdom list
        for (Card card : potentialCards) {
            kingdomCardsListModel.addElement(card);
        }
        gameCreatedSuccessfully = true;
    }

    public boolean isGameCreated() {
        return gameCreatedSuccessfully;
    }
    private void populateAvailablePlayers() {
        availablePlayersListModel.clear();
        playerDAO.getAllPlayers().forEach(availablePlayersListModel::addElement);
    }
    // I know, bad way to do this but it's to make sure the kingdom cards are not base cards
    private boolean isBaseCard(String cardName) {
        return cardName.equals("Copper") || cardName.equals("Silver") || cardName.equals("Gold") ||
                cardName.equals("Estate") || cardName.equals("Duchy") || cardName.equals("Province") ||
                cardName.equals("Curse");
    }
    private void jButtonAddPlayerToGameActionPerformed(java.awt.event.ActionEvent evt) {
        List<Player> selectedPlayers = jListAvailablePlayers.getSelectedValuesList();
        for (Player player : selectedPlayers) {
            if (!gamePlayersListModel.contains(player)) { // Avoid duplicates
                gamePlayersListModel.addElement(player);
            }
        }
        jListAvailablePlayers.clearSelection(); // Clear selection after moving
    }
    private void populateAvailableExpansions() {
        availableExpansionsListModel.clear();
        expansionDAO.getAllExpansions().forEach(availableExpansionsListModel::addElement);
    }
    private void toggleExpansionSelectionVisibility() {
        //jScrollPaneAvailableExpansions.setVisible(jRadioButtonSelectExpansions.isSelected());
        // jPanelAvailableExpansions.setVisible(jRadioButtonSelectExpansions.isSelected());
        //pack(); //apparently readjusts panel
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAddPlayer;
    private javax.swing.JButton jButtonCancelKingdom;
    private javax.swing.JButton jButtonConfirmKingdom;
    private javax.swing.JButton jButtonRemovePlayer;
    private javax.swing.JButton jButtonRerollKingdom;
    private javax.swing.JList<Player> jListAvailablePlayers;
    private javax.swing.JList<Player> jListGamePlayers;
    private javax.swing.JList<Card> jListKingdomCards;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelKingdom;
    private javax.swing.JPanel jPanelPlayers;
    private javax.swing.JRadioButton jRadioButtonSelectExpansions;
    private javax.swing.JRadioButton jRadioButtonUseOwnedExpansions;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
